/*
 * Copyright (c) 2020 bahlef.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 * Contributors:
 * bahlef - initial API and implementation and/or initial documentation
 */

package de.funfried.netbeans.plugins.external.formatter.sql.jsqlformatter.ui;

import de.funfried.netbeans.plugins.external.formatter.sql.jsqlformatter.JSQLFormatterSettings;
import de.funfried.netbeans.plugins.external.formatter.ui.options.AbstractFormatterOptionsPanel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.prefs.Preferences;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.LayoutStyle;
import org.netbeans.api.project.Project;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

/**
 *
 * @author bahlef
 */
public class JSQLFormatterOptionsPanel extends AbstractFormatterOptionsPanel {
	/**
	 * Creates new form {@link GoogleJavaFormatterOptionsPanel}.
	 *
	 * @param project the {@link Project} if the panel is used to modify project
	 *                specific settings, otherwise {@code null}
	 */
	public JSQLFormatterOptionsPanel(Project project) {
		super(project);

		initComponents();
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialectBtnGrp = new ButtonGroup();
        defaultDialectRdBtn = new JRadioButton();
        mSqlServerRdBtn = new JRadioButton();
        dialectStyleLbl = new JLabel();

        dialectBtnGrp.add(defaultDialectRdBtn);
        defaultDialectRdBtn.setSelected(true);
        Mnemonics.setLocalizedText(defaultDialectRdBtn, NbBundle.getMessage(JSQLFormatterOptionsPanel.class, "JSQLFormatterOptionsPanel.defaultDialectRdBtn.text")); // NOI18N
        defaultDialectRdBtn.setToolTipText(NbBundle.getMessage(JSQLFormatterOptionsPanel.class, "JSQLFormatterOptionsPanel.defaultDialectRdBtn.toolTipText")); // NOI18N
        defaultDialectRdBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                defaultDialectRdBtnActionPerformed(evt);
            }
        });

        dialectBtnGrp.add(mSqlServerRdBtn);
        Mnemonics.setLocalizedText(mSqlServerRdBtn, NbBundle.getMessage(JSQLFormatterOptionsPanel.class, "JSQLFormatterOptionsPanel.mSqlServerRdBtn.text")); // NOI18N
        mSqlServerRdBtn.setToolTipText(NbBundle.getMessage(JSQLFormatterOptionsPanel.class, "JSQLFormatterOptionsPanel.mSqlServerRdBtn.toolTipText")); // NOI18N
        mSqlServerRdBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                mSqlServerRdBtnActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(dialectStyleLbl, NbBundle.getMessage(JSQLFormatterOptionsPanel.class, "JSQLFormatterOptionsPanel.dialectStyleLbl.text")); // NOI18N
        dialectStyleLbl.setToolTipText(NbBundle.getMessage(JSQLFormatterOptionsPanel.class, "JSQLFormatterOptionsPanel.dialectStyleLbl.toolTipText")); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dialectStyleLbl)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(defaultDialectRdBtn)
                .addGap(18, 18, 18)
                .addComponent(mSqlServerRdBtn)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(defaultDialectRdBtn)
                    .addComponent(mSqlServerRdBtn)
                    .addComponent(dialectStyleLbl))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void defaultDialectRdBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_defaultDialectRdBtnActionPerformed
		fireChangedListener();
    }//GEN-LAST:event_defaultDialectRdBtnActionPerformed

    private void mSqlServerRdBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_mSqlServerRdBtnActionPerformed
		fireChangedListener();
    }//GEN-LAST:event_mSqlServerRdBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JRadioButton defaultDialectRdBtn;
    private ButtonGroup dialectBtnGrp;
    private JLabel dialectStyleLbl;
    private JRadioButton mSqlServerRdBtn;
    // End of variables declaration//GEN-END:variables

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void load(Preferences preferences) {
		String sqlFormatterCodeStyle = preferences.get(JSQLFormatterSettings.SQL_FORMATTER_CODE_STYLE, "DEFAULT");

		if ("DEFAULT".equals(sqlFormatterCodeStyle)) {
			dialectBtnGrp.setSelected(defaultDialectRdBtn.getModel(), true);
		} else {
			dialectBtnGrp.setSelected(mSqlServerRdBtn.getModel(), true);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void store(Preferences preferences) {
		preferences.put(JSQLFormatterSettings.SQL_FORMATTER_CODE_STYLE,"DEFAULT");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean valid() {
		return dialectBtnGrp.getSelection() != null;
	}
}
